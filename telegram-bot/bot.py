# telegram-bot/bot.py

from telegram import Update, ForceReply, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackContext, CallbackQueryHandler
import os
from weather_utils import get_weather_for_city, generate_plot, read_from_hdfs


SUPPORTED_CITIES = ['Moscow', 'Saint Petersburg', 'Adler']


# === –ö–æ–º–∞–Ω–¥–∞ /start ===
def start(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    update.message.reply_markdown_v2(
        fr'–ü—Ä–∏–≤–µ—Ç, {user.mention_markdown_v2()}\! –Ø –±–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã\.',
        reply_markup=ForceReply(selective=True),
    )


# === –ö–æ–º–∞–Ω–¥–∞ /help ===
def help_command(update: Update, context: CallbackContext) -> None:
    update.message.reply_text(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "/help ‚Äî –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/forecast ‚Äî –ü–æ–ª—É—á–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã\n"
        "/weather <–≥–æ—Ä–æ–¥> ‚Äî –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞\n"
        "/choose ‚Äî –í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≥–æ—Ä–æ–¥–∞: Moscow, Saint Petersburg, Adler"
    )


# === –ö–æ–º–∞–Ω–¥–∞ /forecast ===
def forecast(update: Update, context: CallbackContext) -> None:
    try:
        update.message.reply_text("‚è≥ –°–æ–∑–¥–∞—é –≥—Ä–∞—Ñ–∏–∫...")
        df = read_from_hdfs("/raw/weather/latest/raw_weather.json")
        plot_path = generate_plot(df)
        with open(plot_path, 'rb') as photo:
            update.message.reply_photo(photo=photo, caption="üìà –ì—Ä–∞—Ñ–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü")
    except Exception as e:
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")


# === –ö–æ–º–∞–Ω–¥–∞ /weather –ú–æ—Å–∫–≤–∞ ===

def send_city_weather(context, city, chat_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞"""
    try:
        df = read_from_hdfs("/raw/weather/latest/raw_weather.json")
        city_df = df[df['city'] == city].iloc[-1:]

        if city_df.empty:
            context.bot.send_message(chat_id=chat_id, text="‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞")
            return

        latest = city_df.iloc[0]
        message = (
            f"üå§Ô∏è –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –≤ *{latest['city']}*:\n"
            f"üå° –°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {latest['tavg']}¬∞C\n"
            f"üß£ –ú–∏–Ω/–º–∞–∫—Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {latest['tmin']}‚Äì{latest['tmax']}¬∞C\n"
            f"üíß –û—Å–∞–¥–∫–∏: {latest['prcp']} –º–º\n"
            f"üå¨ –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {latest['wspd']} –º/—Å\n"
            f"üîΩ –î–∞–≤–ª–µ–Ω–∏–µ: {latest['pres']} –≥–ü–∞"
        )
        context.bot.send_message(chat_id=chat_id, text=message, parse_mode='Markdown')
    except Exception as e:
        context.bot.send_message(chat_id=chat_id, text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


def weather(update: Update, context: CallbackContext) -> None:
    if not context.args:
        update.message.reply_text('‚ùó –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥. –ü—Ä–∏–º–µ—Ä: /weather Moscow')
        return

    requested_city = " ".join(context.args).strip().title()

    if requested_city not in SUPPORTED_CITIES:
        update.message.reply_text(
            f"‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —ç—Ç–æ—Ç –≥–æ—Ä–æ–¥.\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞: {', '.join(SUPPORTED_CITIES)}"
        )
        return

    send_city_weather(context, requested_city, update.message.chat.id)


# === –ö–æ–º–∞–Ω–¥–∞ /choose ‚Äî –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ ===
def choose_city(update: Update, context: CallbackContext) -> None:
    keyboard = [
        [InlineKeyboardButton(city, callback_data=f"city_{city}") for city in SUPPORTED_CITIES]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:', reply_markup=reply_markup)


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ ===
def button_weather_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    city = query.data.replace("city_", "")
    send_city_weather(context, city, query.message.chat.id)


# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
def main():
    updater = Updater(TELEGRAM_BOT_TOKEN)

    dispatcher = updater.dispatcher

    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("help", help_command))
    dispatcher.add_handler(CommandHandler("forecast", forecast))
    dispatcher.add_handler(CommandHandler("weather", weather))
    dispatcher.add_handler(CommandHandler("choose", choose_city))
    dispatcher.add_handler(CallbackQueryHandler(button_weather_handler))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    main()
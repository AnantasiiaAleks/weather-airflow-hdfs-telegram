# telegram-bot/weather_utils.py

import requests
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os
from datetime import datetime
from io import BytesIO


# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
HDFS_NAMENODE = "http://namenode:50070/webhdfs/v1"
HDFS_USER = "airflow"

LOCAL_TEMP_DIR = "/tmp/telegram-bot/"
os.makedirs(LOCAL_TEMP_DIR, exist_ok=True)


# === –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å HDFS (—á–µ—Ä–µ–∑ WebHDFS REST API) ===
def save_to_hdfs(df, hdfs_path="/raw/telegram-bot/latest/weather.json"):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç DataFrame –≤ HDFS —á–µ—Ä–µ–∑ WebHDFS"""
    df_json = df.to_json()

    create_url = f"{HDFS_NAMENODE}{hdfs_path}?op=CREATE&user={HDFS_USER}"
    response = requests.put(create_url, allow_redirects=False)

    if response.status_code != 307:
        raise Exception(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –≤ HDFS: {response.text}")

    datanode_url = response.headers['Location']
    response = requests.put(datanode_url, data=df_json, headers={'Content-Type': 'application/json'})

    if response.status_code != 201:
        raise Exception(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ HDFS: {response.text}")

    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ HDFS: {hdfs_path}")
    return hdfs_path


# === –ß—Ç–µ–Ω–∏–µ –∏–∑ HDFS ===
def read_from_hdfs(hdfs_path):
    """–ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ HDFS —á–µ—Ä–µ–∑ WebHDFS"""
    open_url = f"{HDFS_NAMENODE}{hdfs_path}?op=OPEN&user={HDFS_USER}"

    response = requests.get(open_url, allow_redirects=False)
    if response.status_code != 307:
        raise Exception(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞ –≤ HDFS: {response.text}")

    datanode_url = response.headers['Location']
    response = requests.get(datanode_url)

    if response.status_code != 200:
        raise Exception(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ HDFS: {response.text}")

    df = pd.read_json(BytesIO(response.content))
    return df


# === –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ ===
def generate_plot(df, plot_path=None):
    """–°—Ç—Ä–æ–∏—Ç –ª–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã"""
    df['date'] = pd.to_datetime(df['time']).dt.date

    plt.figure(figsize=(14, 7))
    sns.lineplot(data=df, x="date", y="tavg", hue="city", marker="o")
    plt.xticks(rotation=45)
    plt.title("–°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C) –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü")
    plt.tight_layout()
    plot_path = plot_path or os.path.join(LOCAL_TEMP_DIR, "temperature_plot.png")
    plt.savefig(plot_path)
    plt.close()

    return plot_path


# === –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ —á–µ—Ä–µ–∑ Telegram Bot API ===
def send_photo(bot_token, chat_id, photo_path):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ –≤ Telegram"""
    from telegram import Bot

    bot = Bot(token=bot_token)
    with open(photo_path, 'rb') as photo:
        bot.send_photo(chat_id=chat_id, photo=photo, caption="üìä –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü")


# === –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã –ø–æ –≥–æ—Ä–æ–¥—É ===
def get_weather_for_city(city, hdfs_path="/raw/weather/latest/raw_weather.json"):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã –ø–æ –æ–¥–Ω–æ–º—É –≥–æ—Ä–æ–¥—É"""
    df = read_from_hdfs(hdfs_path)
    city_df = df[df['city'] == city]

    if city_df.empty:
        return f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}."

    latest = city_df.iloc[-1]
    message = (
        f"üå§Ô∏è –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –≤ *{latest['city']}*:\n"
        f"üå° –°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {latest['tavg']}¬∞C\n"
        f"üß£ –ú–∏–Ω/–º–∞–∫—Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {latest['tmin']}‚Äì{latest['tmax']}¬∞C\n"
        f"üíß –û—Å–∞–¥–∫–∏: {latest['prcp']} –º–º\n"
        f"üå¨ –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {latest['wspd']} –º/—Å\n"
        f"üîΩ –î–∞–≤–ª–µ–Ω–∏–µ: {latest['pres']} –≥–ü–∞"
    )

    return message